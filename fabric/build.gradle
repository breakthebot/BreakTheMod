plugins {
    id 'com.github.johnrengelman.shadow'
}
repositories {
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/releases/' }
    maven {
        url "https://maven.nucleoid.xyz/"
        name "Nucleoid"
    }
}
architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+build.8"


    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    modImplementation "eu.pb4:placeholder-api:2.5.2+1.21.3"
    modApi("me.shedaniel.cloth:cloth-config-fabric:17.0.144") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modApi "com.terraformersmc:modmenu:13.0.2"

}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
